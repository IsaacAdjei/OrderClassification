/*
	CLASSIFY ORDERS INTO BINNABLE, HANGING AND HB (HANGING-BINNABLE).
  
  THE IDEA IS TO DESIGN A FRAMEWORK FOR QUICKLY SETTING UP A CLASSIFICATION SCHEME FOR ORDERS.
  THE BASE DESIGN MAY BE ALTERED TO DEAL WITH MORE COMPLEX CLASSIFICATION DEMANDS.
*/

GO

-- FIRST, CLASSIFY PRODUCTS INTO VARIOUS HANDLING TYPES: HANGING, BINNABLE AND NON-BINNABLE
-- SAVE THIS HANDLING TYPE INFORMATION WITH THE UNIQUE LIST OF PRODUCTS.

-- YOU MAY ADD OTHER CLASSIFCATION TYPES. FOR EXAMPLE, LOCATION_TYPE CLASSIFICATION, ETC SO THAT
-- BETWEEN-CLASS CLASSIFICATION PROBLEMS WILL BECOME FEASIBLE


-- GET ORDERS FROM ORDER DETAILS TABLE
-------------------------------------------------
SELECT
	sod.SalesOrderID ,sod.ProductID, p.HandlingType ,sod.OrderQty
FROM Sales.SalesOrderDetail sod INNER JOIN Production.Product p
	ON sod.ProductID = p.ProductID

-- CLASSIFICATION OF ORDERS IS BASED ON THE PRODUCT COMPONENTS OF AN ORDER
-- ONLY HANGING PRODUCTS IMPLY HANGING ORDER, ONLY BINNABLE PRODUCTS IMPLY BINNABLE ORDER, AND HB FOR A MIXTURE

-- BASE QUERY
-----------------------------------------------------------------------------------------------------------
SELECT
	DISTINCT sod.SalesOrderID, p.HandlingType
FROM Sales.SalesOrderDetail sod INNER JOIN Production.Product p
	ON sod.ProductID = p.ProductID


-- THIS IS THE FINAL STAGE OF THE ORDER CLASSIFCATION PROCESS.
------------------------------------------------------------------------------------------------------------
SELECT
	NEW.SalesOrderID,
	CASE
		WHEN NEW.HANGING_COUNT = 1 AND NEW.BINNABLE_COUNT = 0 AND NEW.NB_COUNT = 0 THEN 'HANGING_ONLY'
		WHEN NEW.HANGING_COUNT = 0 AND NEW.BINNABLE_COUNT = 1 AND NEW.NB_COUNT = 0 THEN 'BINNABLE_ONLY'
		WHEN NEW.HANGING_COUNT = 0 AND NEW.BINNABLE_COUNT = 0 AND NEW.NB_COUNT = 1 THEN 'NON-BINNABLE_ONLY'
		WHEN NEW.HANGING_COUNT = 1 AND NEW.BINNABLE_COUNT = 1 AND NEW.NB_COUNT = 0 THEN 'HANGING_BINNABLE'
		WHEN NEW.HANGING_COUNT = 1 AND NEW.BINNABLE_COUNT = 0 AND NEW.NB_COUNT = 1 THEN 'HANGING_NON-BINNABLE'
		WHEN NEW.HANGING_COUNT = 0 AND NEW.BINNABLE_COUNT = 1 AND NEW.NB_COUNT = 1 THEN 'BINNABLE_NON-BINNABLE'
		WHEN NEW.HANGING_COUNT = 1 AND NEW.BINNABLE_COUNT = 1 AND NEW.NB_COUNT = 1 THEN 'HANGING_BINNABLE_NON-BINNABLE'
	END CLASSIFICATION,
	NEW.HANGING_QUANTITY,
	NEW.BINNABLE_QUANTITY,
	NEW.NONBIN_QUANTITY,
	NEW.Total_Units
FROM
(
SELECT
	BASE.SalesOrderID,
	SUM(CASE WHEN BASE.HandlingType = 'Hanging' THEN 1 ELSE 0 END) HANGING_COUNT,
	SUM(CASE WHEN BASE.HandlingType = 'Binnable' THEN 1 ELSE 0 END) BINNABLE_COUNT,
	SUM(CASE WHEN BASE.HandlingType = 'Non-Binnable' THEN 1 ELSE 0 END) NB_COUNT,
	SUM(CASE WHEN BASE.HandlingType = 'Hanging' THEN BASE.Units ELSE 0 END) HANGING_QUANTITY,
	SUM(CASE WHEN BASE.HandlingType = 'Binnable' THEN BASE.Units ELSE 0 END) BINNABLE_QUANTITY,
	SUM(CASE WHEN BASE.HandlingType = 'Non-Binnable' THEN BASE.Units ELSE 0 END) NONBIN_QUANTITY,
	SUM(BASE.Units)Total_Units
FROM
(
	SELECT
		sod.SalesOrderID, p.HandlingType, SUM(sod.OrderQty)Units
	FROM Sales.SalesOrderDetail sod INNER JOIN Production.Product p
		ON sod.ProductID = p.ProductID
	GROUP BY
		sod.SalesOrderID, p.HandlingType
)BASE
GROUP BY
	BASE.SalesOrderID
)NEW;


/*
	This is just a test comment
*/